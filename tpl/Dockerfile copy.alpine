#############################
# Settings Common Variables #
#############################
FROM {{DOCKER_IMAGE_OS}}:{{DOCKER_IMAGE_TAG}} AS base

ARG DOCKER_IMAGE={{DOCKER_IMAGE}}
ENV DOCKER_IMAGE=$DOCKER_IMAGE
ARG DOCKER_IMAGE_OS={{DOCKER_IMAGE_OS}}
ENV DOCKER_IMAGE_OS=$DOCKER_IMAGE_OS
ARG DOCKER_IMAGE_TAG={{DOCKER_IMAGE_TAG}}
ENV DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG

ARG BUILD_DATE
ENV BUILD_DATE=$BUILD_DATE
ARG VCS_REF
ENV VCS_REF=$VCS_REF

ENV tempDir=/tmp/tmp.dGIeIJ

ARG EXTENDED_IMAGE=1
ENV EXTENDED_IMAGE=$EXTENDED_IMAGE

# ngx_devel_kit
# https://github.com/vision5/ngx_devel_kit/releases
# The NDK is now considered to be stable.
ARG VER_NGX_DEVEL_KIT=0.3.1
ENV VER_NGX_DEVEL_KIT=$VER_NGX_DEVEL_KIT

# luajit2
# https://github.com/openresty/luajit2/releases
ARG VER_LUAJIT=2.1-20201012-2
ENV VER_LUAJIT=$VER_LUAJIT
ARG LUAJIT_LIB=/usr/local/lib
ENV LUAJIT_LIB=$LUAJIT_LIB
ARG LUAJIT_INC=/usr/local/include/luajit-2.1
ENV LUAJIT_INC=$LUAJIT_INC
ARG LD_LIBRARY_PATH=/usr/local/lib/:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH

# lua-nginx-module
# https://github.com/openresty/lua-nginx-module/releases
# Production ready.
ARG VER_LUA_NGINX_MODULE=0.10.17
ENV VER_LUA_NGINX_MODULE=$VER_LUA_NGINX_MODULE

# lua-resty-core
# https://github.com/openresty/lua-resty-core/releases
# This library is production ready.
ARG VER_LUA_RESTY_CORE=0.1.19
ENV VER_LUA_RESTY_CORE=$VER_LUA_RESTY_CORE
ARG LUA_LIB_DIR=/usr/local/share/lua/5.1
ENV LUA_LIB_DIR=$LUA_LIB_DIR

# lua-resty-lrucache
# https://github.com/openresty/lua-resty-lrucache/releases
# This library is considered production ready.
ARG VER_LUA_RESTY_LRUCACHE=0.10
ENV VER_LUA_RESTY_LRUCACHE=$VER_LUA_RESTY_LRUCACHE

# headers-more-nginx-module
# https://github.com/openresty/headers-more-nginx-module/commits/master
ARG VER_OPENRESTY_HEADERS=d6d7ebab3c0c5b32ab421ba186783d3e5d2c6a17
ENV VER_OPENRESTY_HEADERS=$VER_OPENRESTY_HEADERS

# lua-resty-cookie
# https://github.com/cloudflare/lua-resty-cookie/commits/master
ARG VER_CLOUDFLARE_COOKIE=303e32e512defced053a6484bc0745cf9dc0d39e
ENV VER_CLOUDFLARE_COOKIE=$VER_CLOUDFLARE_COOKIE

# lua-resty-dns
# https://github.com/openresty/lua-resty-dns/releases
ARG VER_OPENRESTY_DNS=0.21
ENV VER_OPENRESTY_DNS=$VER_OPENRESTY_DNS

# lua-resty-memcached
# https://github.com/openresty/lua-resty-memcached/releases
ARG VER_OPENRESTY_MEMCACHED=0.15
ENV VER_OPENRESTY_MEMCACHED=$VER_OPENRESTY_MEMCACHED

# lua-resty-mysql
# https://github.com/openresty/lua-resty-mysql/releases
ARG VER_OPENRESTY_MYSQL=0.22
ENV VER_OPENRESTY_MYSQL=$VER_OPENRESTY_MYSQL

# lua-resty-redis
# https://github.com/openresty/lua-resty-redis/releases
ARG VER_OPENRESTY_REDIS=0.29
ENV VER_OPENRESTY_REDIS=$VER_OPENRESTY_REDIS

# lua-resty-shell
# https://github.com/openresty/lua-resty-shell/releases
ARG VER_OPENRESTY_SHELL=0.03
ENV VER_OPENRESTY_SHELL=$VER_OPENRESTY_SHELL

# lua-resty-upstream-healthcheck
# https://github.com/openresty/lua-resty-upstream-healthcheck/releases
ARG VER_OPENRESTY_HEALTHCHECK=0.06
ENV VER_OPENRESTY_HEALTHCHECK=$VER_OPENRESTY_HEALTHCHECK

# lua-resty-websocket
# https://github.com/openresty/lua-resty-websocket/releases
ARG VER_OPENRESTY_WEBSOCKET=0.07
ENV VER_OPENRESTY_WEBSOCKET=$VER_OPENRESTY_WEBSOCKET

# lua-upstream-nginx-module
# https://github.com/openresty/lua-upstream-nginx-module/releases
ARG VER_LUA_UPSTREAM=0.07
ENV VER_LUA_UPSTREAM=$VER_LUA_UPSTREAM

# nginx-lua-prometheus
# https://github.com/knyar/nginx-lua-prometheus/releases
ARG VER_PROMETHEUS=0.20200523
ENV VER_PROMETHEUS=$VER_PROMETHEUS

# stream-lua-nginx-module
# https://github.com/openresty/stream-lua-nginx-module/releases
ARG VER_OPENRESTY_STREAMLUA=0.0.8
ENV VER_OPENRESTY_STREAMLUA=$VER_OPENRESTY_STREAMLUA

# https://github.com/nginx/nginx/releases
# TODO: change in NGINX_VERSION
ARG VER_NGINX={{VER_NGINX}}
ENV VER_NGINX=$VER_NGINX
ARG NJS_VERSION=0.4.4
ENV NJS_VERSION=$NJS_VERSION
ARG PKG_RELEASE=1
ENV PKG_RELEASE=$PKG_RELEASE
ARG EXTRA_BUILD_CONFIG="\
         --add-module=${tempDir}/lua-nginx-module-${VER_LUA_NGINX_MODULE} \
         --add-module=${tempDir}/ngx_devel_kit-${VER_NGX_DEVEL_KIT} \
        # --add-module=/lua-upstream-nginx-module-${VER_LUA_UPSTREAM} \
    "
ENV EXTRA_BUILD_CONFIG=$EXTRA_BUILD_CONFIG

ARG BUILD_DEPS="\
      curl \
      g++ \
      geoip-dev \
      gzip \
      make \
      mercurial \
      openssl-dev \
      pcre-dev \
      tar \
      zlib-dev"
ENV BUILD_DEPS=$BUILD_DEPS

# TODO: REMOVE?
ARG NGINX_BUILD_DEPS="\
# NGINX
      alpine-sdk \
      bash \
      findutils \
      gcc \
      gd-dev \
      geoip-dev \
      libc-dev \
      libedit-dev \
      libxslt-dev \
      linux-headers \
      make \
      mercurial \
      openssl-dev \
      pcre-dev \
      perl-dev \
      zlib-dev"
ENV NGINX_BUILD_DEPS=$NGINX_BUILD_DEPS

####################################
# Build Nginx with support for LUA #
####################################
FROM base AS builder

RUN set -eux \
    && mkdir $tempDir \
    && chown nobody:nobody $tempDir \
    && apk update \
    && apk add --no-cache \
       $BUILD_DEPS \
       $NGINX_BUILD_DEPS

RUN set -eux \
# NGX Devel Kit
# ##############################################################################
    && curl -Lo ${tempDir}/ngx_devel_kit.tar.gz https://github.com/vision5/ngx_devel_kit/archive/v${VER_NGX_DEVEL_KIT}.tar.gz \
    && tar -C ${tempDir}/ -xvzf ${tempDir}/ngx_devel_kit.tar.gz \
    \
# OpenResty LUAJIT2
# ##############################################################################
    && curl -Lo ${tempDir}/luajit.tar.gz https://github.com/openresty/luajit2/archive/v${VER_LUAJIT}.tar.gz \
    && tar -C ${tempDir}/ -xvzf ${tempDir}/luajit.tar.gz \
    && cd ${tempDir}/luajit2-${VER_LUAJIT} \
    && make -j "$(nproc)" \
    && make install \
    \
# Lua Nginx Module
# ##############################################################################
    && curl -Lo ${tempDir}/lua-nginx.tar.gz https://github.com/openresty/lua-nginx-module/archive/v${VER_LUA_NGINX_MODULE}.tar.gz \
    && tar -C ${tempDir}/ -xvzf ${tempDir}/lua-nginx.tar.gz
# # LUA Resty Core
# # ##############################################################################
#     && curl -Lo ${tempDir}/lua-resty-core.tar.gz https://github.com/openresty/lua-resty-core/archive/v${VER_LUA_RESTY_CORE}.tar.gz \
#     && tar -C ${tempDir}/ -xvzf ${tempDir}/lua-resty-core.tar.gz \
#     && cd ${tempDir}/lua-resty-core-${VER_LUA_RESTY_CORE} \
#     && make -j "$(nproc)" \
#     && make install \
#     \
# # LUA Resty LRUCache
# # ##############################################################################
#     && curl -Lo ${tempDir}/lua-resty-lrucache.tar.gz https://github.com/openresty/lua-resty-lrucache/archive/v${VER_LUA_RESTY_LRUCACHE}.tar.gz \
#     && tar -C ${tempDir}/ -xvzf ${tempDir}/lua-resty-lrucache.tar.gz \
#     && cd ${tempDir}/lua-resty-lrucache-${VER_LUA_RESTY_LRUCACHE} \
#     && make -j "$(nproc)" \
#     && make install \
#     \
# # OpenResty Headers
# # ##############################################################################
#     && [ $EXTENDED_IMAGE -eq 1 ] && ( \
#     curl -Lo ${tempDir}/headers-more-nginx-module.zip https://github.com/openresty/headers-more-nginx-module/archive/${VER_OPENRESTY_HEADERS}.zip \
#     && unzip -d ${tempDir}/ ${tempDir}/headers-more-nginx-module.zip) \
# # Cloudflare Cookie
# # ##############################################################################
#     && [ $EXTENDED_IMAGE -eq 1 ] && ( \
#     curl -Lo ${tempDir}/lua-resty-cookie.tar.gz https://github.com/cloudflare/lua-resty-cookie/archive/${VER_CLOUDFLARE_COOKIE}.tar.gz \
#     && tar -C ${tempDir}/ -xvzf ${tempDir}/lua-resty-cookie.tar.gz \
#     && cd ${tempDir}/lua-resty-cookie-${VER_CLOUDFLARE_COOKIE} \
#     && make -j "$(nproc)") \
# # OpenResty Dns
# # ##############################################################################
#     && [ $EXTENDED_IMAGE -eq 1 ] && ( \
#     curl -Lo ${tempDir}/lua-openresty-dns.tar.gz https://github.com/openresty/lua-resty-dns/archive/v${VER_OPENRESTY_DNS}.tar.gz \
#     && tar -C ${tempDir}/ -xvzf ${tempDir}/lua-openresty-dns.tar.gz \
#     && cd ${tempDir}/lua-resty-dns-${VER_OPENRESTY_DNS} \
#     && make -j "$(nproc)" \
#     && make install) \
# # OpenResty Memcached
# # ##############################################################################
#     && [ $EXTENDED_IMAGE -eq 1 ] && ( \
#     curl -Lo ${tempDir}/lua-openresty-memcached.tar.gz https://github.com/openresty/lua-resty-memcached/archive/v${VER_OPENRESTY_MEMCACHED}.tar.gz \
#     && tar -C ${tempDir}/ -xvzf ${tempDir}/lua-openresty-memcached.tar.gz \
#     && cd ${tempDir}/lua-resty-memcached-${VER_OPENRESTY_MEMCACHED} \
#     && make -j "$(nproc)" \
#     && make install) \
# # OpenResty Mysql
# # ##############################################################################
#     && [ $EXTENDED_IMAGE -eq 1 ] && ( \
#     curl -Lo ${tempDir}/lua-openresty-mysql.tar.gz https://github.com/openresty/lua-resty-mysql/archive/v${VER_OPENRESTY_MYSQL}.tar.gz \
#     && tar -C ${tempDir}/ -xvzf ${tempDir}/lua-openresty-mysql.tar.gz \
#     && cd ${tempDir}/lua-resty-mysql-${VER_OPENRESTY_MYSQL} \
#     && make -j "$(nproc)" \
#     && make install) \
# # OpenResty Redis
# # ##############################################################################
#     && [ $EXTENDED_IMAGE -eq 1 ] && ( \
#     curl -Lo ${tempDir}/lua-openresty-redis.tar.gz https://github.com/openresty/lua-resty-redis/archive/v${VER_OPENRESTY_REDIS}.tar.gz \
#     && tar -C ${tempDir}/ -xvzf ${tempDir}/lua-openresty-redis.tar.gz \
#     && cd ${tempDir}/lua-resty-redis-${VER_OPENRESTY_REDIS} \
#     && make -j "$(nproc)" \
#     && make install) \
# # OpenResty Shell
# # ##############################################################################
#     && [ $EXTENDED_IMAGE -eq 1 ] && ( \
#     curl -Lo ${tempDir}/lua-openresty-shell.tar.gz https://github.com/openresty/lua-resty-shell/archive/v${VER_OPENRESTY_SHELL}.tar.gz \
#     && tar -C ${tempDir}/ -xvzf ${tempDir}/lua-openresty-shell.tar.gz \
#     && cd ${tempDir}/lua-resty-shell-${VER_OPENRESTY_SHELL} \
#     && make -j "$(nproc)" \
#     && make install) \
# # OpenResty Upstream Healthcheck
# # ##############################################################################
#     && [ $EXTENDED_IMAGE -eq 1 ] && ( \
#     curl -Lo ${tempDir}/lua-resty-upstream-healthcheck.tar.gz https://github.com/openresty/lua-resty-upstream-healthcheck/archive/v${VER_OPENRESTY_HEALTHCHECK}.tar.gz \
#     && tar -C ${tempDir}/ -xvzf ${tempDir}/lua-resty-upstream-healthcheck.tar.gz \
#     && cd ${tempDir}/lua-resty-upstream-healthcheck-${VER_OPENRESTY_HEALTHCHECK} \
#     && make -j "$(nproc)" \
#     && make install) \
# # OpenResty Websocket
# # ##############################################################################
#     && [ $EXTENDED_IMAGE -eq 1 ] && ( \
#     curl -Lo ${tempDir}/lua-openresty-websocket.tar.gz https://github.com/openresty/lua-resty-websocket/archive/v${VER_OPENRESTY_WEBSOCKET}.tar.gz \
#     && tar -C ${tempDir}/ -xvzf ${tempDir}/lua-openresty-websocket.tar.gz \
#     && cd ${tempDir}/lua-resty-websocket-${VER_OPENRESTY_WEBSOCKET} \
#     && make -j "$(nproc)" \
#     && make install) \
# # LUA Upstream
# # ##############################################################################
#     && [ $EXTENDED_IMAGE -eq 1 ] && ( \
#     curl -Lo ${tempDir}/lua-upstream-nginx-module.tar.gz https://github.com/openresty/lua-upstream-nginx-module/archive/v${VER_LUA_UPSTREAM}.tar.gz \
#     && tar -C ${tempDir}/ -xvzf ${tempDir}/lua-upstream-nginx-module.tar.gz \
#     && cd ${tempDir}/lua-upstream-nginx-module-${VER_LUA_UPSTREAM}) \
# # Prometheus
# # ##############################################################################
#     && [ $EXTENDED_IMAGE -eq 1 ] && ( \
#     curl -Lo ${tempDir}/nginx-lua-prometheus.tar.gz https://github.com/knyar/nginx-lua-prometheus/archive/${VER_PROMETHEUS}.tar.gz \
#     && tar -C ${tempDir}/ -xvzf ${tempDir}/nginx-lua-prometheus.tar.gz \
#     && mv ${tempDir}/nginx-lua-prometheus-${VER_PROMETHEUS}/*.lua ${LUA_LIB_DIR}/) \
# # OpenResty Stream Lua
# # ##############################################################################
#     && [ $EXTENDED_IMAGE -eq 1 ] && ( \
#     curl -Lo ${tempDir}/stream-lua-nginx-module.zip https://github.com/openresty/stream-lua-nginx-module/archive/v${VER_OPENRESTY_STREAMLUA}.zip \
#     && unzip -d ${tempDir}/ ${tempDir}/stream-lua-nginx-module.zip)

RUN set -eux \
# NGINX
# ##############################################################################
# we're on an architecture upstream doesn't officially build for
# let's build binaries from the published packaging sources
    && curl -Lo /nginx.tar.gz https://nginx.org/download/nginx-${VER_NGINX}.tar.gz \
    && tar -C / -xvzf /nginx.tar.gz \
    && cd /nginx-${VER_NGINX} \
# TODO: REMOVE?
    && mkdir -p /var/cache/nginx/client_temp \
       /var/cache/nginx/proxy_temp \
       /var/cache/nginx/fastcgi_temp \
       /var/cache/nginx/uwsgi_temp \
       /var/cache/nginx/scgi_temp

RUN apkArch="$(cat /etc/apk/arch)" \
    && nginxPackages=" \
        nginx=${VER_NGINX}-r${PKG_RELEASE} \
        nginx-module-xslt=${VER_NGINX}-r${PKG_RELEASE} \
        nginx-module-geoip=${VER_NGINX}-r${PKG_RELEASE} \
        nginx-module-image-filter=${VER_NGINX}-r${PKG_RELEASE} \
        nginx-module-njs=${VER_NGINX}.${NJS_VERSION}-r${PKG_RELEASE} \
    " \
    && chown -R nobody:nobody ${tempDir} \
    # && su nobody -s /bin/sh -c " \
        && export HOME=${tempDir} \
        # && export LUA_LIB_DIR=${LUA_LIB_DIR} \
        # && export LUAJIT_LIB=${LUAJIT_LIB} \
        # && export LUAJIT_INC=${LUAJIT_INC} \
        # && export LD_LIBRARY_PATH=${LD_LIBRARY_PATH} \
        # && export EXTRA_BUILD_CONFIG='${EXTRA_BUILD_CONFIG}' \
        && cd ${tempDir} \
        && hg clone https://hg.nginx.org/pkg-oss \
        && cd pkg-oss \
        && hg up ${VER_NGINX}-${PKG_RELEASE} \
        && cd alpine \
        && export CFLAGS='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC' \
        && export LDFLAGS='-Wl,-rpath,/usr/local/lib -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie' \
        && sed -i 's#%%BASE_CONFIGURE_ARGS%%#%%BASE_CONFIGURE_ARGS%% %%EXTRA_CONFIGURE_ARGS%%#g' APKBUILD-base.in \
        && sed -i "s#CFLAGS= ./configure#CFLAGS='${CFLAGS}' ./configure#g" APKBUILD-base.in \
        && sed -i -e "s#%%EXTRA_CONFIGURE_ARGS%%#${EXTRA_BUILD_CONFIG}#g" APKBUILD-base.in \
        && make base \
        && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \
        && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \
        # " \
# TODO: MOVE into next layer
    && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \
    && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages

##########################################
# Combine everything with minimal layers #
##########################################
FROM base

# http://label-schema.org/rc1/
LABEL maintainer="Fabio Cicerchia <info@fabiocicerchia.it>" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.description="Nginx $VER_NGINX with Lua support based on $DOCKER_IMAGE_OS $DOCKER_IMAGE_TAG." \
      org.label-schema.docker.cmd="docker run -p 80:80 -d $DOCKER_IMAGE:$VER_NGINX-$DOCKER_IMAGE_OS$DOCKER_IMAGE_TAG" \
      org.label-schema.name="$DOCKER_IMAGE" \
      org.label-schema.schema-version="1.0" \
      org.label-schema.url="https://github.com/$DOCKER_IMAGE" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/$DOCKER_IMAGE" \
      org.label-schema.version="$VER_NGINX-$DOCKER_IMAGE_OS$DOCKER_IMAGE_TAG" \
      versions.extended=${EXTENDED_IMAGE} \
      versions.headers-more-nginx-module=${VER_OPENRESTY_HEADERS} \
      versions.lua-nginx-module=${VER_LUA_NGINX_MODULE} \
      versions.lua-resty-cookie=${VER_CLOUDFLARE_COOKIE} \
      versions.lua-resty-core=${VER_LUA_RESTY_CORE} \
      versions.lua-resty-dns=${VER_OPENRESTY_DNS} \
      versions.lua-resty-lrucache=${VER_LUA_RESTY_LRUCACHE} \
      versions.lua-resty-memcached=${VER_OPENRESTY_MEMCACHED} \
      versions.lua-resty-mysql=${VER_OPENRESTY_MYSQL} \
      versions.lua-resty-redis=${VER_OPENRESTY_REDIS} \
      versions.lua-resty-shell=${VER_OPENRESTY_SHELL} \
      versions.lua-resty-upstream-healthcheck=${VER_OPENRESTY_HEALTHCHECK} \
      versions.lua-resty-websocket=${VER_OPENRESTY_WEBSOCKET} \
      versions.lua-upstream=${VER_LUA_UPSTREAM} \
      versions.luajit2=${VER_LUAJIT} \
      versions.nginx-lua-prometheus=${VER_PROMETHEUS} \
      versions.nginx=${VER_NGINX} \
      versions.ngx_devel_kit=${VER_NGX_DEVEL_KIT} \
      versions.os=${DOCKER_IMAGE_TAG} \
      versions.stream-lua-nginx-module=${VER_OPENRESTY_STREAMLUA}

ARG PKG_DEPS="\
      geoip-dev \
      openssl-dev \
      pcre-dev \
      zlib-dev"
ENV PKG_DEPS=$PKG_DEPS

COPY --from=builder /etc/nginx /etc/nginx
COPY --from=builder /usr/local/lib /usr/local/lib
COPY --from=builder /usr/local/share/lua /usr/local/share/lua
COPY --from=builder /usr/sbin/nginx /usr/sbin/nginx
COPY --from=builder /var/cache/nginx /var/cache/nginx

RUN set -eux \
    && apk update \
    && apk add --no-cache \
       $PKG_DEPS \
# Bring in gettext so we can get `envsubst`, then throw
# the rest away. To do this, we need to install `gettext`
# then move `envsubst` out of the way so `gettext` can
# be deleted completely, then move `envsubst` back.
    && apk add --no-cache --virtual .gettext gettext \
    && mv /usr/bin/envsubst /tmp/ \
    \
    && runDeps="$( \
        scanelf --needed --nobanner /tmp/envsubst \
            | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
            | sort -u \
            | xargs -r apk info --installed \
            | sort -u \
    )" \
    && apk add --no-cache $runDeps \
    && apk del .gettext \
    && mv /tmp/envsubst /usr/local/bin/ \
# Bring in tzdata so users could set the timezones through the environment
# variables
    && apk add --no-cache tzdata \
# Bring in curl and ca-certificates to make registering on DNS SD easier
    && apk add --no-cache curl ca-certificates \
# forward request and error logs to docker log collector
    && mkdir -p /var/log/nginx \
    && ln -sf /dev/stdout /var/log/nginx/access.log \
    && ln -sf /dev/stderr /var/log/nginx/error.log \
# create nginx user/group first, to be consistent throughout docker variants
    && addgroup -g 101 -S nginx \
    && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx

COPY docker-entrypoint.sh /
COPY 10-listen-on-ipv6-by-default.sh /docker-entrypoint.d
COPY 20-envsubst-on-templates.sh /docker-entrypoint.d
ENTRYPOINT ["/docker-entrypoint.sh"]

# smoke test
# ##############################################################################
RUN envsubst -V \
    && nginx -V \
    && nginx -t

HEALTHCHECK --interval=30s --timeout=3s CMD curl --fail http://localhost/ || exit 1

EXPOSE 80 443

# Override stop signal to stop process gracefully
STOPSIGNAL SIGQUIT

CMD ["nginx", "-g", "daemon off;"]
